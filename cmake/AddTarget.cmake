
function(SetupTarget target_name target_modules)
  foreach(mod ${target_modules})
    target_include_directories(${target_name} PRIVATE ${mod}/include)
    string(TOUPPER ${mod} modupper)
    target_compile_definitions(${target_name} PRIVATE ZAMT_MODULE_${modupper})
  endforeach(mod)
  if(MSVC)
    target_compile_options(${target_name} PRIVATE /W3 /WX)
    target_compile_options(${target_name} PRIVATE $<$<CONFIG:Debug>:/RTC>)
    target_compile_options(${target_name} PRIVATE $<$<CONFIG:Release>:/GL>)
    set_target_properties(${target_name} PROPERTIES LINK_FLAGS_RELEASE "/LTCG")
  else()
    target_compile_options(${target_name} PRIVATE -Wall -pedantic -Wextra -Wconversion -Werror)
    if(USE_ADDRESS_SANITIZER)
      target_compile_options(${target_name} PRIVATE $<$<CONFIG:Debug>:-fsanitize=address>)
    endif()
    # TODO: remove this if llvm-3.8 or later has LLVMgold.so again
    if(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
      target_compile_options(${target_name} PRIVATE $<$<CONFIG:Release>:-flto>)
      target_compile_options(${target_name} PRIVATE $<$<CONFIG:RelWithDebInfo>:-flto>)
      target_compile_options(${target_name} PRIVATE $<$<CONFIG:RelWithDebInfo>:-pg>)
    endif()
    if(USE_ADDRESS_SANITIZER)
      set_target_properties(${target_name} PROPERTIES LINK_FLAGS_DEBUG "-fsanitize=address")
    endif()
    # TODO: remove this if llvm-3.8 or later has LLVMgold.so again
    if(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
      set_target_properties(${target_name} PROPERTIES LINK_FLAGS_RELEASE "-flto")
      set_target_properties(${target_name} PROPERTIES LINK_FLAGS_RELWITHDEBINFO "-flto -pg")
    endif()
  endif()
endfunction(SetupTarget)

function(LinkTarget target_name libs)
  target_link_libraries(${target_name} ${libs})
  if(Threads_FOUND)
    target_link_libraries(${target_name} ${CMAKE_THREAD_LIBS_INIT})
  endif()
endfunction(LinkTarget)

function(CollectSources target_modules)
  unset(all_cpp_sources)
  unset(extra_includes)
  unset(extra_libs)
  foreach(mod ${target_modules})
    include(${mod}/sources.cmake)
    unset(cpp_sources)
    foreach(cpp ${module_cpps})
      set(cpp_sources ${cpp_sources} ${mod}/src/${cpp})
    endforeach(cpp)
    set(all_cpp_sources ${all_cpp_sources} ${cpp_sources})
    source_group(${mod} FILES ${cpp_sources})
    set(extra_includes ${extra_includes} ${module_includes})
    set(extra_libs ${extra_libs} ${module_libs})
  endforeach(mod)
  set(collected_sources ${all_cpp_sources} PARENT_SCOPE)
  set(collected_includes ${extra_includes} PARENT_SCOPE)
  set(collected_libs ${extra_libs} PARENT_SCOPE)
endfunction(CollectSources)

function(AddExe target_name target_modules)
  CollectSources("${target_modules}")
  add_executable(${target_name} ${collected_sources})
  SetupTarget(${target_name} "${target_modules}")
  target_include_directories(${target_name} SYSTEM PRIVATE ${collected_includes})
  LinkTarget(${target_name} "${collected_libs}")
endfunction(AddExe)

function(AddLib target_name target_modules)
  CollectSources("${target_modules}")
  add_library(${target_name} STATIC ${collected_sources})
  SetupTarget(${target_name} "${target_modules}")
  target_include_directories(${target_name} SYSTEM PRIVATE ${collected_includes})
endfunction(AddLib)
